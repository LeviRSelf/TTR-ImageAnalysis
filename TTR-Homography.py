import cv2
import numpy as np
from matplotlib import pyplot as plt
import os
import time
from itertools import combinations
import random

basepath = './photos/'
files = [f for f in os.listdir(basepath) if f[-3:] in ('jpg','png')]

templist = []
templateFiles = ['citypoint_48.jpg','citypoint_72.jpg','citypoint180_48.jpg','citypoint180_72.jpg']

refpoints = [('Montreal',3035,267),('Calgary',817,279),('Winnipeg',1577,318),('Vancouver',376,337),('Boston',3275,459),('Saul St. Marie',2381,483),('Seattle',363,517),('Toronto',2750,551),('Portland',290,682),('Duluth',1954,694),('New York',3096,699),('Helena',1155,709),('Pittsburgh',2807,847),('Chicago',2363,897),('Omaha',1849,992),('Washington',3125,993),('Salt Lake City',911,1111),('Kansas City',1920,1157),('Saint Louis',2211,1163),('Raleigh',2922,1214),('Denver',1351,1215),('Nashville',2524,1288),('San Francisco',239,1323),('Atlanta',2696,1402),('Charleston',3016,1426),('Oklahoma City',1851,1438),('Little Rock',2154,1452),('Las Vegas',722,1471),('Santa Fe',1327,1508),('Los Angeles',502,1663),('Phoenix',907,1683),('Dallas',1918,1724),('El Paso',1307,1803),('New Orleans',2369,1813),('Houston',2056,1854),('Miami',3126,1941)]
trains = [[(420, 301), (533, 289), (536, 323), (425, 336)], [(543, 287), (655, 275), (658, 310), (547, 321)], [(664, 271), (777, 258), (780, 297), (668, 307)], [(852, 252), (955, 207), (966, 237), (867, 284)], [(969, 202), (1079, 179), (1081, 213), (975, 234)], [(1090, 177), (1201, 176), (1201, 208), (1092, 212)], [(1214, 175), (1328, 185), (1322, 219), (1213, 209)], [(1340, 187), (1447, 219), (1436, 252), (1332, 221)], [(1459, 223), (1561, 271), (1544, 301), (1447, 254)], [(1649, 294), (1759, 319), (1752, 351), (1643, 328)], [(1769, 319), (1877, 341), (1870, 374), (1762, 350)], [(1887, 343), (1996, 367), (1989, 400), (1881, 376)], [(2005, 369), (2111, 389), (2103, 423), (1999, 400)], [(2121, 394), (2229, 413), (2219, 447), (2115, 425)], [(2239, 417), (2348, 438), (2340, 470), (2231, 450)], [(2405, 437), (2492, 364), (2514, 393), (2426, 462)], [(2503, 362), (2605, 306), (2618, 337), (2518, 390)], [(2614, 301), (2722, 267), (2731, 300), (2624, 335)], [(2732, 262), (2842, 238), (2845, 271), (2739, 295)], [(2856, 235), (2969, 235), (2967, 268), (2856, 271)], [(3097, 258), (3178, 327), (3156, 353), (3074, 285)], [(3190, 335), (3273, 403), (3250, 428), (3167, 362)], [(3245, 433), (3224, 460), (3140, 393), (3166, 364)], [(3154, 358), (3131, 384), (3046, 317), (3073, 288)], [(330, 372), (367, 371), (369, 479), (331, 479)], [(373, 370), (411, 369), (409, 478), (375, 477)], [(414, 491), (527, 494), (526, 527), (414, 526)], [(536, 493), (645, 480), (649, 511), (540, 524)], [(652, 474), (742, 410), (763, 438), (672, 502)], [(746, 404), (777, 421), (827, 324), (794, 308)], [(836, 325), (906, 406), (935, 384), (863, 300)], [(914, 415), (984, 497), (1013, 472), (943, 393)], [(993, 506), (1062, 587), (1089, 564), (1021, 482)], [(1070, 595), (1140, 676), (1171, 654), (1100, 572)], [(313, 528), (271, 629), (306, 641), (346, 543)], [(352, 543), (311, 642), (342, 656), (387, 559)], [(410, 541), (404, 576), (511, 599), (521, 565)], [(529, 568), (639, 591), (630, 624), (524, 601)], [(647, 593), (758, 617), (751, 650), (642, 624)], [(768, 619), (876, 642), (867, 674), (761, 651)], [(885, 645), (991, 666), (987, 701), (881, 678)], [(1004, 669), (1111, 692), (1103, 724), (999, 700)], [(1189, 649), (1265, 574), (1292, 600), (1214, 675)], [(1275, 568), (1354, 496), (1376, 518), (1298, 593)], [(1360, 487), (1440, 412), (1463, 436), (1383, 510)], [(1447, 404), (1526, 328), (1548, 355), (1471, 429)], [(1586, 354), (1613, 331), (1692, 405), (1667, 433)], [(1674, 438), (1701, 414), (1778, 486), (1753, 513)], [(1760, 521), (1786, 495), (1862, 568), (1838, 594)], [(1847, 603), (1873, 577), (1949, 651), (1925, 674)], [(1200, 688), (1314, 689), (1312, 722), (1201, 723)], [(1323, 688), (1435, 687), (1434, 721), (1325, 720)], [(1446, 687), (1558, 688), (1556, 719), (1447, 722)], [(1568, 686), (1678, 684), (1676, 719), (1567, 720)], [(1688, 686), (1799, 684), (1796, 718), (1689, 719)], [(1807, 682), (1918, 682), (1917, 716), (1810, 718)], [(2014, 623), (2114, 583), (2126, 614), (2028, 654)], [(2122, 578), (2227, 541), (2237, 569), (2136, 610)], [(2234, 534), (2341, 494), (2351, 524), (2247, 564)], [(1989, 669), (2101, 653), (2104, 688), (1994, 702)], [(2110, 648), (2217, 632), (2224, 668), (2115, 683)], [(2230, 630), (2338, 615), (2344, 649), (2235, 666)], [(2348, 614), (2458, 595), (2462, 628), (2354, 645)], [(2468, 593), (2576, 577), (2582, 609), (2475, 626)], [(2587, 572), (2699, 554), (2701, 587), (2591, 604)], [(2442, 471), (2553, 494), (2541, 525), (2437, 504)], [(2562, 495), (2669, 514), (2662, 547), (2556, 529)], [(2720, 503), (2777, 408), (2806, 426), (2750, 517)], [(2789, 395), (2876, 321), (2896, 349), (2811, 419)], [(2889, 309), (2996, 269), (3007, 299), (2901, 343)], [(2999, 324), (3037, 318), (3049, 421), (3015, 426)], [(3018, 443), (3054, 439), (3069, 539), (3035, 543)], [(3038, 556), (3075, 552), (3091, 652), (3057, 654)], [(3233, 471), (3262, 492), (3202, 581), (3173, 562)], [(3164, 573), (3196, 591), (3134, 682), (3105, 664)], [(3266, 493), (3301, 514), (3234, 603), (3204, 585)], [(3201, 596), (3230, 612), (3168, 703), (3141, 686)], [(333, 701), (339, 669), (447, 689), (440, 720)], [(459, 695), (564, 733), (552, 763), (450, 723)], [(579, 739), (668, 795), (652, 825), (562, 765)], [(686, 806), (767, 871), (747, 895), (664, 833)], [(779, 883), (853, 960), (826, 978), (754, 904)], [(861, 974), (909, 1062), (886, 1076), (834, 990)], [(1113, 736), (1147, 759), (1088, 849), (1060, 831)], [(1053, 842), (1083, 861), (1027, 950), (997, 931)], [(989, 942), (1021, 959), (963, 1049), (933, 1031)], [(1158, 743), (1194, 734), (1234, 833), (1200, 844)], [(1202, 850), (1238, 840), (1278, 940), (1246, 950)], [(1249, 961), (1282, 949), (1323, 1048), (1292, 1061)], [(1296, 1070), (1329, 1057), (1367, 1154), (1334, 1167)], [(1240, 731), (1345, 774), (1330, 804), (1229, 761)], [(1354, 777), (1455, 816), (1442, 850), (1341, 809)], [(1464, 823), (1569, 864), (1554, 894), (1453, 853)], [(1578, 869), (1679, 910), (1666, 940), (1564, 897)], [(1689, 913), (1793, 953), (1777, 983), (1676, 941)], [(1822, 934), (1860, 832), (1894, 847), (1851, 945)], [(1866, 823), (1907, 724), (1940, 739), (1897, 837)], [(1943, 740), (1978, 751), (1935, 854), (1905, 839)], [(1903, 850), (1931, 861), (1889, 960), (1862, 948)], [(1973, 740), (1987, 708), (2082, 762), (2066, 790)], [(2093, 768), (2194, 800), (2181, 832), (2083, 797)], [(2204, 804), (2311, 829), (2302, 863), (2199, 835)], [(1887, 976), (1973, 916), (1991, 943), (1901, 1000)], [(1980, 912), (2072, 849), (2091, 878), (1997, 937)], [(2101, 844), (2206, 861), (2202, 892), (2099, 878)], [(2218, 865), (2321, 879), (2317, 909), (2212, 893)], [(2355, 849), (2434, 773), (2408, 749), (2332, 827)], [(2417, 738), (2514, 677), (2532, 708), (2437, 767)], [(2528, 669), (2636, 641), (2645, 671), (2537, 700)], [(2642, 637), (2729, 569), (2752, 598), (2662, 664)], [(2759, 577), (2796, 577), (2797, 682), (2761, 682)], [(2766, 695), (2802, 695), (2804, 797), (2770, 799)], [(2743, 820), (2747, 787), (2633, 779), (2634, 815)], [(2623, 818), (2619, 783), (2509, 797), (2516, 834)], [(2505, 838), (2497, 801), (2389, 827), (2398, 863)], [(2406, 873), (2512, 846), (2516, 873), (2411, 900)], [(2522, 841), (2634, 826), (2633, 856), (2529, 871)], [(2645, 824), (2759, 830), (2755, 862), (2645, 856)], [(2303, 916), (2331, 929), (2269, 1019), (2246, 1002)], [(2240, 1013), (2264, 1029), (2204, 1115), (2183, 1100)], [(1877, 1024), (1908, 1007), (1956, 1104), (1924, 1119)], [(1916, 1123), (1886, 1135), (1841, 1041), (1870, 1027)], [(1955, 1119), (2063, 1117), (2061, 1145), (1955, 1149)], [(2072, 1114), (2184, 1113), (2183, 1145), (2073, 1145)], [(1955, 1156), (2063, 1154), (2065, 1187), (1955, 1190)], [(2076, 1154), (2185, 1156), (2182, 1184), (2076, 1185)], [(2216, 1123), (2274, 1032), (2301, 1052), (2243, 1140)], [(2278, 1023), (2337, 936), (2369, 951), (2307, 1039)], [(2242, 1154), (2257, 1182), (2354, 1131), (2335, 1101)], [(2348, 1096), (2363, 1129), (2460, 1072), (2444, 1043)], [(2454, 1035), (2548, 984), (2564, 1015), (2469, 1066)], [(2561, 981), (2655, 926), (2670, 957), (2574, 1008)], [(2665, 920), (2760, 870), (2776, 898), (2681, 946)], [(960, 1078), (1070, 1095), (1061, 1134), (954, 1113)], [(1077, 1098), (1185, 1121), (1178, 1151), (1071, 1132)], [(1197, 1123), (1299, 1141), (1291, 1176), (1190, 1152)], [(1191, 1160), (1293, 1181), (1287, 1209), (1187, 1191)], [(1069, 1138), (1179, 1157), (1170, 1188), (1068, 1167)], [(953, 1117), (1060, 1137), (1052, 1166), (948, 1147)], [(1372, 1162), (1454, 1096), (1478, 1126), (1391, 1191)], [(1474, 1091), (1568, 1044), (1584, 1076), (1486, 1120)], [(1584, 1038), (1686, 1012), (1696, 1043), (1593, 1071)], [(1703, 1011), (1811, 985), (1815, 1023), (1707, 1038)], [(2822, 920), (2846, 1022), (2880, 1018), (2858, 914)], [(2849, 1032), (2872, 1139), (2906, 1131), (2887, 1028)], [(2855, 889), (2956, 939), (2971, 908), (2873, 860)], [(2967, 943), (3060, 993), (3078, 963), (2982, 914)], [(2926, 1166), (2995, 1084), (3023, 1107), (2951, 1190)], [(2957, 1192), (3028, 1110), (3056, 1132), (2982, 1213)], [(3037, 1100), (3107, 1021), (3136, 1044), (3064, 1124)], [(3005, 1075), (3075, 997), (3102, 1014), (3030, 1097)], [(2828, 784), (2921, 729), (2941, 756), (2842, 812)], [(2933, 721), (3029, 666), (3047, 695), (2950, 750)], [(2847, 819), (2945, 762), (2962, 793), (2869, 846)], [(2956, 758), (3054, 701), (3071, 734), (2973, 785)], [(3075, 734), (3082, 840), (3116, 840), (3110, 737)], [(3119, 734), (3125, 838), (3157, 838), (3154, 733)], [(3085, 855), (3088, 956), (3123, 956), (3116, 853)], [(3125, 851), (3130, 954), (3163, 956), (3157, 851)], [(242, 700), (199, 799), (231, 816), (280, 715)], [(196, 816), (173, 920), (207, 929), (229, 823)], [(170, 935), (168, 1041), (200, 1041), (208, 938)], [(169, 1054), (172, 1165), (206, 1162), (202, 1055)], [(177, 1172), (204, 1278), (241, 1280), (209, 1173)], [(287, 706), (240, 808), (275, 825), (324, 721)], [(239, 824), (218, 929), (252, 934), (273, 828)], [(218, 937), (212, 1047), (243, 1049), (252, 940)], [(212, 1056), (216, 1168), (248, 1168), (244, 1062)], [(220, 1177), (251, 1284), (282, 1277), (253, 1179)], [(293, 1268), (397, 1231), (411, 1267), (304, 1303)], [(408, 1228), (513, 1197), (524, 1234), (419, 1267)], [(523, 1195), (625, 1160), (637, 1193), (532, 1228)], [(635, 1155), (737, 1124), (749, 1158), (647, 1191)], [(747, 1120), (853, 1084), (864, 1119), (760, 1152)], [(867, 1124), (877, 1153), (773, 1187), (764, 1160)], [(752, 1163), (761, 1192), (662, 1223), (652, 1197)], [(637, 1202), (648, 1226), (548, 1259), (539, 1234)], [(528, 1239), (537, 1266), (434, 1299), (426, 1272)], [(413, 1276), (425, 1301), (321, 1335), (309, 1305)], [(1414, 1194), (1523, 1200), (1520, 1237), (1411, 1224)], [(1531, 1202), (1641, 1195), (1645, 1225), (1535, 1234)], [(1650, 1191), (1760, 1174), (1767, 1204), (1656, 1224)], [(1768, 1169), (1868, 1132), (1884, 1159), (1779, 1197)], [(1415, 1236), (1525, 1246), (1522, 1280), (1415, 1269)], [(1535, 1245), (1643, 1237), (1645, 1271), (1534, 1278)], [(1654, 1235), (1762, 1215), (1771, 1248), (1662, 1268)], [(1771, 1214), (1870, 1172), (1882, 1202), (1784, 1242)], [(2251, 1197), (2355, 1228), (2344, 1261), (2242, 1231)], [(2364, 1232), (2470, 1264), (2460, 1297), (2355, 1264)], [(2780, 901), (2813, 919), (2745, 1007), (2720, 988)], [(2711, 992), (2735, 1018), (2637, 1076), (2617, 1048)], [(2605, 1061), (2633, 1084), (2563, 1167), (2535, 1146)], [(2525, 1158), (2559, 1173), (2504, 1266), (2476, 1252)], [(2546, 1245), (2639, 1190), (2656, 1217), (2561, 1272)], [(2658, 1182), (2767, 1157), (2772, 1190), (2664, 1215)], [(2784, 1157), (2896, 1164), (2893, 1195), (2783, 1188)], [(2549, 1320), (2569, 1292), (2657, 1356), (2636, 1384)], [(894, 1149), (878, 1256), (913, 1262), (929, 1156)], [(878, 1264), (839, 1362), (866, 1377), (910, 1277)], [(829, 1369), (854, 1393), (777, 1469), (752, 1447)], [(691, 1488), (684, 1454), (575, 1475), (585, 1513)], [(578, 1517), (530, 1613), (503, 1598), (547, 1504)], [(491, 1616), (416, 1537), (388, 1566), (465, 1639)], [(407, 1532), (347, 1444), (313, 1464), (380, 1553)], [(341, 1438), (300, 1336), (267, 1353), (310, 1457)], [(457, 1640), (381, 1562), (356, 1586), (432, 1661)], [(375, 1555), (314, 1469), (281, 1487), (349, 1574)], [(306, 1459), (264, 1358), (233, 1374), (276, 1475)], [(535, 1624), (643, 1609), (648, 1643), (538, 1659)], [(655, 1605), (768, 1608), (765, 1644), (658, 1642)], [(779, 1609), (891, 1635), (883, 1669), (775, 1645)], [(911, 1641), (949, 1542), (982, 1554), (942, 1655)], [(958, 1533), (1009, 1438), (1043, 1457), (985, 1549)], [(1020, 1429), (1081, 1339), (1109, 1361), (1044, 1447)], [(1094, 1329), (1174, 1258), (1198, 1287), (1112, 1351)], [(1194, 1249), (1296, 1212), (1309, 1244), (1208, 1281)], [(1323, 1248), (1316, 1356), (1350, 1360), (1360, 1251)], [(1315, 1365), (1308, 1472), (1343, 1476), (1347, 1367)], [(1284, 1497), (1300, 1530), (1196, 1573), (1183, 1543)], [(1168, 1545), (1187, 1580), (1090, 1623), (1072, 1589)], [(1061, 1593), (1075, 1627), (976, 1671), (958, 1637)], [(943, 1679), (1051, 1709), (1040, 1742), (938, 1714)], [(1062, 1710), (1167, 1742), (1154, 1774), (1051, 1747)], [(1174, 1745), (1283, 1772), (1273, 1808), (1171, 1778)], [(1293, 1762), (1329, 1765), (1330, 1659), (1300, 1657)], [(1300, 1641), (1333, 1647), (1343, 1542), (1304, 1537)], [(1372, 1520), (1481, 1511), (1478, 1477), (1370, 1493)], [(1491, 1477), (1495, 1508), (1604, 1500), (1598, 1465)], [(1611, 1464), (1614, 1495), (1724, 1481), (1720, 1452)], [(1386, 1252), (1463, 1329), (1439, 1357), (1361, 1280)], [(1468, 1336), (1572, 1382), (1556, 1411), (1456, 1368)], [(1578, 1385), (1684, 1399), (1679, 1432), (1574, 1416)], [(1697, 1403), (1806, 1409), (1803, 1438), (1694, 1431)], [(1808, 1445), (1838, 1465), (1772, 1550), (1748, 1531)], [(1739, 1537), (1767, 1562), (1686, 1638), (1665, 1616)], [(1659, 1619), (1679, 1647), (1583, 1706), (1564, 1677)], [(1554, 1680), (1573, 1717), (1474, 1761), (1459, 1731)], [(1450, 1735), (1460, 1766), (1352, 1796), (1342, 1766)], [(1407, 1795), (1516, 1779), (1521, 1810), (1410, 1829)], [(1527, 1775), (1636, 1763), (1640, 1794), (1530, 1809)], [(1647, 1758), (1756, 1745), (1758, 1776), (1650, 1792)], [(1763, 1741), (1875, 1724), (1880, 1757), (1769, 1775)], [(1898, 1176), (1865, 1279), (1898, 1291), (1930, 1188)], [(1864, 1291), (1832, 1394), (1864, 1404), (1896, 1302)], [(1938, 1189), (1905, 1293), (1937, 1305), (1971, 1200)], [(1902, 1302), (1873, 1405), (1903, 1415), (1937, 1311)], [(1898, 1421), (2004, 1419), (2003, 1453), (1897, 1454)], [(2016, 1417), (2126, 1414), (2126, 1450), (2017, 1453)], [(1850, 1469), (1885, 1466), (1896, 1572), (1864, 1575)], [(1864, 1585), (1900, 1581), (1910, 1686), (1877, 1692)], [(1907, 1580), (1941, 1578), (1956, 1685), (1918, 1686)], [(1905, 1567), (1891, 1464), (1926, 1459), (1938, 1567)], [(1969, 1647), (2029, 1563), (2058, 1584), (1993, 1670)], [(2038, 1555), (2101, 1465), (2129, 1487), (2063, 1573)], [(2196, 1188), (2169, 1289), (2203, 1298), (2232, 1194)], [(2166, 1300), (2141, 1404), (2174, 1412), (2200, 1309)], [(2497, 1298), (2520, 1323), (2435, 1392), (2414, 1369)], [(2406, 1369), (2420, 1405), (2320, 1446), (2306, 1415)], [(2297, 1415), (2302, 1453), (2192, 1459), (2188, 1429)], [(2162, 1483), (2213, 1579), (2246, 1566), (2193, 1468)], [(2220, 1590), (2270, 1686), (2301, 1671), (2251, 1574)], [(2276, 1693), (2322, 1790), (2355, 1775), (2307, 1680)], [(2700, 1353), (2783, 1280), (2805, 1306), (2720, 1377)], [(2793, 1275), (2876, 1204), (2900, 1227), (2813, 1301)], [(2817, 1306), (2903, 1234), (2930, 1260), (2839, 1332)], [(2810, 1312), (2831, 1338), (2749, 1410), (2725, 1384)], [(2752, 1413), (2859, 1423), (2856, 1454), (2747, 1445)], [(2871, 1421), (2987, 1425), (2980, 1465), (2871, 1455)], [(2940, 1250), (2960, 1218), (3051, 1279), (3027, 1309)], [(3060, 1289), (3094, 1304), (3042, 1400), (3015, 1384)], [(2647, 1393), (2564, 1464), (2584, 1485), (2670, 1418)], [(2552, 1469), (2482, 1555), (2508, 1575), (2579, 1495)], [(2472, 1564), (2410, 1653), (2440, 1671), (2501, 1585)], [(2404, 1669), (2364, 1767), (2399, 1781), (2438, 1680)], [(2678, 1423), (2595, 1493), (2616, 1520), (2704, 1450)], [(2589, 1503), (2516, 1583), (2539, 1607), (2612, 1526)], [(2503, 1596), (2444, 1687), (2470, 1706), (2536, 1616)], [(2435, 1699), (2394, 1798), (2429, 1808), (2471, 1713)], [(539, 1703), (625, 1764), (645, 1738), (557, 1672)], [(640, 1775), (740, 1819), (754, 1786), (655, 1743)], [(762, 1790), (753, 1820), (859, 1848), (868, 1818)], [(878, 1818), (873, 1852), (988, 1868), (989, 1835)], [(999, 1835), (999, 1870), (1110, 1859), (1106, 1825)], [(1115, 1823), (1123, 1859), (1231, 1831), (1223, 1800)], [(1323, 1844), (1424, 1899), (1439, 1868), (1343, 1812)], [(1436, 1902), (1542, 1934), (1553, 1903), (1447, 1868)], [(1561, 1902), (1555, 1938), (1664, 1956), (1669, 1919)], [(1678, 1920), (1677, 1954), (1789, 1960), (1789, 1926)], [(1798, 1924), (1803, 1958), (1913, 1939), (1905, 1905)], [(1915, 1903), (1925, 1935), (2028, 1899), (2018, 1864)], [(1923, 1765), (1994, 1843), (2020, 1822), (1951, 1748)], [(1955, 1737), (2025, 1816), (2052, 1796), (1980, 1716)], [(2096, 1828), (2207, 1810), (2208, 1845), (2100, 1860)], [(2215, 1810), (2325, 1793), (2329, 1827), (2220, 1843)], [(2438, 1806), (2535, 1751), (2551, 1780), (2454, 1834)], [(2550, 1746), (2658, 1716), (2665, 1751), (2558, 1779)], [(2674, 1713), (2785, 1716), (2784, 1751), (2672, 1752)], [(2804, 1722), (2910, 1771), (2887, 1804), (2789, 1754)], [(2918, 1783), (3005, 1851), (2984, 1885), (2896, 1809)], [(3014, 1862), (3088, 1942), (3057, 1968), (2988, 1887)], [(2702, 1466), (2772, 1549), (2796, 1528), (2730, 1444)], [(2777, 1557), (2852, 1642), (2877, 1624), (2806, 1538)], [(2853, 1649), (2927, 1736), (2954, 1715), (2886, 1631)], [(2934, 1744), (3006, 1830), (3029, 1806), (2961, 1723)], [(3010, 1835), (3084, 1922), (3109, 1901), (3038, 1814)], [(3005, 1453), (3008, 1558), (3042, 1560), (3043, 1454)], [(3007, 1574), (3026, 1681), (3062, 1679), (3046, 1570)], [(3026, 1693), (3062, 1798), (3094, 1789), (3065, 1687)], [(3069, 1813), (3124, 1905), (3157, 1890), (3101, 1797)]]

refpointDict = {(pt[1],pt[2]):pt[0] for pt in refpoints}

ref_img = cv2.imread('reference.png')
ref_keypoints = [cv2.KeyPoint(pt[1],pt[2],50) for pt in refpoints]
orbDescriptorExtractor = cv2.DescriptorExtractor_create("SIFT")
(autokeypoints, ref_descriptors) = orbDescriptorExtractor.compute(ref_img,ref_keypoints)

def dist(pt1,pt2):
	return ((pt1[0]-pt2[0])**2.0+(pt1[1]-pt2[1])**2.0)**0.5


for tf in templateFiles:
	template = cv2.imread(tf,0)
	w, h = template.shape[::-1]
	templist.append((template,w,h))

start = time.clock()
for imgfile in files:
	img_rgb = cv2.imread(basepath+imgfile)
	img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)
	tempidx = 0
	matchCount = 0
	while matchCount < 30 and tempidx < len(templist):
		template,w,h = templist[tempidx]
		res = cv2.matchTemplate(img_gray,template,cv2.TM_CCORR_NORMED)
		threshold = 0.97
		loc = np.where( res >= threshold)
		matchCount = len(zip(*loc[::-1]))
		tempidx += 1
	ptGroups = [] #minpt,maxpt
	for pt in zip(*loc[::-1]):
		add = -1
		if ptGroups == []:
			ptGroups.append((pt[0],pt[1],pt[0],pt[1]))
		else:
			for ptidx,oldPoint in enumerate(ptGroups):
				if abs(pt[1] - oldPoint[1]) <= h and abs(pt[0] - oldPoint[0]) <= w:
					add = ptidx
					break
			if add != -1:
				ptGroups[ptidx] = min((ptGroups[ptidx][0],ptGroups[ptidx][1]),pt)+\
				max((ptGroups[ptidx][2],ptGroups[ptidx][3]),pt)

			else:
				ptGroups.append((pt[0],pt[1],pt[0],pt[1]))

	# orbDetector = cv2.FeatureDetector_create("ORB")
	# orbDescriptorExtractor = cv2.DescriptorExtractor_create("ORB")
	# keypoints = orbDetector.detect(img_rgb)
	# (autokeypoints, descriptors) = orbDescriptorExtractor.compute(img_rgb,keypoints)

	keypoints = []
	for pts in ptGroups:
		pt_topleft = (pts[0],pts[1])
		pt_bottemright = (pts[2]+w,pts[3]+h)
		pt_center = ((pts[0]+pts[2]+w)/2,(pts[1]+pts[3]+h)/2)
		# cv2.rectangle(img_rgb, pt_topleft, pt_bottemright, (0,0,255), 2)
		keypoints.append(cv2.KeyPoint(pt_center[0],pt_center[1],50))

	orbDescriptorExtractor = cv2.DescriptorExtractor_create("SIFT")
	(autokeypoints, descriptors) = orbDescriptorExtractor.compute(img_rgb,keypoints)
	bf = cv2.BFMatcher()
	matches = bf.knnMatch(descriptors,ref_descriptors,k=2)
	# matches = sorted(matches, key = lambda x:x.distance)
	good = []
	for m,n in matches:
		if m.distance < 0.75*n.distance:
			good.append(m)
	matches = good
	matches.sort(key=lambda x:x.distance)
	for mt in matches[:4]:
		keypoint = tuple(map(int,keypoints[mt.queryIdx].pt))
		cv2.circle(img_rgb, keypoint, 20, (0,0,255), -1)
		cv2.putText(img_rgb,refpointDict[ref_keypoints[mt.trainIdx].pt],(keypoint[0]+20,keypoint[1]+20),cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255),4)
	if len(matches) >= 4:
		rect = np.array([map(int,keypoints[mt.queryIdx].pt) for mt in matches], dtype = "float32")
		dst = np.array([map(int,ref_keypoints[mt.trainIdx].pt) for mt in matches], dtype = "float32")


		M, mask = cv2.findHomography(rect, dst, cv2.RANSAC,5.0)

		maxWidth, maxHeight = ref_img.shape[1::-1]

		warped = cv2.warpPerspective(img_rgb, M, (maxWidth, maxHeight))
		cv2.polylines(warped,np.array(trains),1,(0,255,0))


		cv2.imwrite('./output'+'/res_'+imgfile+'.png',warped)
print 'Done!'
